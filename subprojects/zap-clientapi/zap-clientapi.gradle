plugins {
    id "me.champeau.gradle.japicmp" version "0.2.5"
    id "org.owasp.dependencycheck" version "1.4.4.1"
}

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'org.owasp.dependencycheck'

dependencies { compile 'org.jdom:jdom:1.1.3' }

sourceSets { examples }

jar {
    manifest {
        attributes 'Implementation-Title': 'OWASP ZAP API Client',
        'Implementation-Version': version,
        'Main-Class': 'org.zaproxy.clientapi.core.ClientApiMain',
        'Create-Date': new Date().format("yyyy-MM-dd")
    }
}

configurations {
    japicmpBaseline
}

dependencies {
    japicmpBaseline ("${project.group}:${project.name}:$versionBC") { force = true }
}

task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask) {
    group 'verification'
    description "Checks artifacts' binary compatibility with latest (released) version '$versionBC'."
    check.dependsOn 'japicmp'
    inputs.file(jar)

    oldClasspath = configurations.japicmpBaseline
    newClasspath = configurations.runtime + files(jar)
    onlyBinaryIncompatibleModified = true
    failOnModification = true
    ignoreMissingClasses = true
    htmlOutputFile = file("$buildDir/reports/japi.html")
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

task uberJar(type: Jar) {
    group 'build'
    description 'Assembles a jar archive containing the main jar and its dependencies.'
    baseName 'zap-api'
    manifest.from jar.manifest
    from {
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

build.dependsOn 'uberJar'

artifacts { archives sourcesJar, javadocJar }

signing {
    if (project.hasProperty('signing.keyId')) {
        sign configurations.archives
    }
}

ext.pomData = pom {
    project {
        name 'OWASP ZAP API Client'
        packaging 'jar'
        description 'Java implementation to access OWASP ZAP API.'
        url 'https://github.com/zaproxy/zap-api-java'

        organization {
            name 'OWASP'
            url 'https://www.owasp.org/index.php/ZAP'
        }

        mailingLists {
            mailingList {
                name 'OWASP ZAP User Group'
                post 'zaproxy-users@googlegroups.com'
                archive 'https://groups.google.com/group/zaproxy-users'
            }
            mailingList {
                name 'OWASP ZAP Developer Group'
                post 'zaproxy-develop@googlegroups.com'
                archive 'https://groups.google.com/group/zaproxy-develop'
            }
        }

        scm {
            url 'https://github.com/zaproxy/zap-api-java'
            connection 'scm:git:https://github.com/zaproxy/zap-api-java.git'
            developerConnection 'scm:git:https://github.com/zaproxy/zap-api-java.git'
        }

        licenses {
            license {
                name 'The Apache License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'psiinon'
                name 'Simon Bennetts'
                email 'psiinon@gmail.com'
            }
        }
    }
}

task generatePom {
    description 'Generates the POM file.'
    pomData.writeTo("$buildDir/pom.xml")
}

install {
    repositories.mavenInstaller {
        pom = pomData
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment ->
                signing.signPom(deployment)
            }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            }

            pom = pomData
        }
    }
}